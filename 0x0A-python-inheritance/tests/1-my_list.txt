``1-my_list`` module tests cases
--------------------------------


How to use 1-my_list
--------------------


Import the class:

    > > > MyList = __import__('1-my_list').MyList


Now test it:

    > > > my_list = MyList([1, 4, 2, 5, 3])
    > > > my_list.print_sorted()
    [1, 2, 3, 4, 5]


an empty list:

    > > > my_list = MyList([])
    > > > my_list.print_sorted()
    []


one element list:

    > > > my_list = MyList([7])
    > > > my_list.print_sorted()
    [7]


starts with the largest element:

    > > > my_list = MyList([7, 5, 1, 3, 6])
    > > > my_list.print_sorted()
    [1, 3, 5, 6, 7]


no argement:

    > > > my_list = MyList()
    > > > my_list.print_sorted()
    []


negative integers:

    > > > my_list = MyList([-3, -1, -2])
    > > > my_list.print_sorted()
    [-3, -2, -1]


repeated elemets:

    > > > my_list = MyList([5, 3, 5, 2, 2])
    > > > my_list.print_sorted()
    [2, 2, 3, 5, 5]


mixed positive and negative integers:

    > > > my_list = MyList([10, -5, 0, -2, 7])
    > > > my_list.print_sorted()
    [-5, -2, 0, 7, 10]


large number of elements(partial check):

    > > > my_list = MyList(list(range(1000, 0, -1)))
    > > > sorted_list = my_list.print_sorted()
    > > > sorted_list[:5]
    [1, 2, 3, 4, 5]
    > > > sorted_list[-5:]
    [966, 997, 998, 999, 1000]
